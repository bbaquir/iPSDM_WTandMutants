install.packages("devtools")
install.packages("XML")
library("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore")
install_github("nolanlab/cytofCore")
library("cytofCore")
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/FCS_Panel_Edit" )
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/FCS_Panel_Edit" )
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/CyTOF Apr13 2016/Concat/normed" )
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/CyTOF Apr13 2016/Concat/normed" )
install.packages("devtools")
install.packages("XML")
library("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore")
install_github("nolanlab/cytofCore")
library("cytofCore")
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/CyTOF Apr13 2016/Concat/normed" )
install.packages("devtools")
install.packages("XML")
library("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore")
install_github("nolanlab/cytofCore")
library("cytofCore")
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/CyTOF Apr13 2016/Concat/normed" )
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/CyTOF Apr13 2016/Concat/normed" )
cytofCore.updatePanel(templateFile = "J:/CyTOFExps/FCSPanelEdit.csv", fcsFolder = "J:/CyTOFExps/CyTOF Apr13 2016/Concat/normed" )
?hclust
setwd("~/Desktop/GateFinder")
library(devtools)
setwd("Desktop/GateFinder")
getwd()
dir.create("GateFinder")
setwd("Desktop/GateFinder")
setwd("C:/Users/beverlie/Documents")
library(devtools)
install()
install(GateFinder)
install("GateFinder)
library(devt
library(devtools)
getwd()
install.packages(dplyr, tidyr, ggplot2, RColorBrewer)
install.packages("dplyr", "tidyr", "ggplot2", "RColorBrewer")
library("dplyr")
library("tidyr")
library("ggplot2")
library("RColorBrewer")
install.packages("biomaRt")
library("biomaRt")
getwd()
q()
install.packages("dplyr", "tidyr", "ggplot2", "RColorBrewer")
install.packages("dplyr", "tidyr", "ggplot2", "RColorBrewer")
library(dplyr)
library("dplyr")
install.packages("dplyr", "tidyr", "ggplot2", "RColorBrewer")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr", lib="C:/Program Files/R/R-3.3.1patched/library")
install.packages(c("tidyr", "ggplot2", "RColorBrewer", "biomaRt"), lib="C:/Program Files/R/R-3.3.1patched/library")
library("dplyr")
library("tidyr")
library("ggplot2")
library("RColorBrewer")
library(biomaRt)
install.packages("biomaRt")
?biomaRt
install.packages("biomaRt")
install.packages(c("BH", "biomartr", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "ggplot2", "hms", "jsonlite", "openssl", "R6", "Rcpp", "readr", "scales", "stringi", "stringr", "tibble", "tidyr", "XML"))
install.packages("flowSOM")
install.packages("FlowSOM")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("FlowSOM")
biocLite(c("GenomicFeatures", "AnnotationDbi"))
source("https://bioconductor.org/biocLite.R")
biocLite("FlowSOM"
)
install.packages(c("bindrcpp", "biomartr", "bit", "blob", "chron", "cli", "cluster", "curl", "data.table", "DBI", "digest", "doParallel", "dplyr", "evaluate", "Formula", "futile.options", "ggplot2", "glue", "highr", "htmlTable", "htmlwidgets", "httpuv", "igraph", "iterators", "lambda.r", "Matrix", "matrixStats", "mgcv", "mime", "munsell", "mvtnorm", "openssl", "pillar", "pkgconfig", "pkgmaker", "plogr", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "rjson", "rlang", "rngtools", "robustbase", "rrcov", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "snow", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidyselect", "utf8", "viridis", "XML", "xtable", "yaml"))
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(c("bit", "callr", "chron", "data.table", "digest", "dplyr", "fansi", "fs", "ggplot2", "glue", "haven", "httpuv", "igraph", "later", "lattice", "Matrix", "matrixStats", "mgcv", "mime", "mvtnorm", "openssl", "processx", "purrr", "Rcpp", "RcppArmadillo", "RCurl", "readr", "rjson", "rlang", "robustbase", "rrcov", "RSQLite", "scales", "shiny", "sourcetools", "stringi", "survival", "tidyr", "tidyselect", "utf8", "XML", "yaml"))
library(tidyverse)
library(magrittr)
library(readxl)
library(tidyverse)
library(magrittr)
library(readxl)
library(tidyverse)
library(magrittr)
library(readxl)
data <- read_excel("./2018 October iPSDM collection.xlsx", sheet = 2)
data %>% ggplot(aes(x = Collect_date, y = `Total cells(M)`)) +
geom_line() +
facet_wrap(~Name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
getwd()
View(data)
install.packages(c("assertthat", "backports", "BH", "biomartr", "bit", "blob", "broom", "callr", "caTools", "checkmate", "chron", "cli", "clipr", "cluster", "colorspace", "curl", "data.table", "dbplyr", "digest", "doParallel", "dplyr", "evaluate", "fansi", "forcats", "foreach", "formatR", "fs", "ggplot2", "glue", "gtable", "haven", "highr", "Hmisc", "hms", "htmlTable", "httpuv", "httr", "igraph", "irlba", "iterators", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "openssl", "pillar", "processx", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "registry", "reprex", "rjson", "rlang", "rmarkdown", "rngtools", "robustbase", "rrcov", "RSQLite", "rstudioapi", "rvest", "scales", "shiny", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "utf8", "whisker", "xfun", "XML", "xml2", "xtable", "yaml"))
install.packages("prcomp")
install.packages(c("callr", "curl", "digest", "ellipsis", "pkgconfig"))
install.packages(c("callr", "curl", "digest", "ellipsis", "pkgconfig"))
install.packages(c("callr", "curl", "digest", "ellipsis", "pkgconfig"))
install.packages(c("callr", "curl", "digest", "ellipsis", "pkgconfig"))
install.packages(c("backports", "BiocManager", "htmltools", "htmlwidgets", "later", "promises"))
install.packages("shiny")
install.packages("rpx")
library("rpx")
library(rpx)
px1 <- PXDataset("PXD000001")
px1
if (!requireNamespace("BiocManager", quietly = TRUE))
BiocManager::install("rpx")
library("rpx")
browseVignettes("rpx")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rpx")
library("rpx")
px1 <- PXDataset("PXD000001")
px1
View(px1)
pxfiles(px1)
mztab <- pxget(px1, "PXD000001_mztab.txt")
mztab
setwd("C:/Users/beverlie/Google Drive/Proteomics Analysis on Human Monocytes/TMT6 Example)
setwd("C:/Users/beverlie/Google Drive/Proteomics Analysis on Human Monocytes/TMT6 Example)
setwd("C:/Users/beverlie/Google Drive/Proteomics Analysis on Human Monocytes/TMT6 Example")
## Install package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rpx")
setwd("C:/Users/beverlie/Google Drive/Proteomics Analysis on Human Monocytes/TMT6 Example")
## Experiment information
library("rpx")
px1 <- PXDataset("PXD000001")
px1
pxfiles(px1)
## Downloading the mzTab data
mztab <- pxget(px1, "PXD000001_mztab.txt")
mztab
## Load mzTab peptide data
qnt <- readMzTabData(mztab, what = "PEP", version = "0.9")
?readMzTabData
?MzTab
??readMzTabData
## Load mzTab peptide data
qnt <- readMzTabData(mztab, what = "PEP", version = "0.9")
## Load mzTab peptide data
qnt <- readMzTabData(mztab, what = "PEP", version = "0.9")
## Load mzTab peptide data
qnt <- readmzTabData(mztab, what = "PEP", version = "0.9")
## Load mzTab peptide data
qnt <- readMzTabData(mztab, what = "PEP", version = "0.9")
setwd("C:/Users/beverlie/Google Drive/Proteomics Analysis on Human Monocytes/Proteomics Example")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("proteomics")
browseVignettes("proteomics")
#setwd
setwd("C:/Users/beverlie/Google Drive/Proteomics Analysis on Human Monocytes/Unique gene and pathway lists/Proteomics/PropsedOmics_Proteomics")
#read proteomic dataframes with paired ttest values included
MT <- read_csv("group_Mt_LPSLPS_vs_Vehicle_20190626.csv")
WT <- read_csv("group_Wt_LPSLPS_vs_Vehicle_20190626.csv")
#remove na values
filter.MT <- na.omit(MT)
filter.WT <- na.omit(WT)
#select columns: gene, Log2FC, padj, hgnc_symbol
filter.MT <- filter.MT %>%
select(c(1, 3, 7, 10))
filter.WT <- filter.WT %>%
select(c(1, 3, 7, 10))
############################DID NOT FILTER ITS NOT WORKING!
###filter.LPS$p.adj <- p.adjust(filter.LPS$d_pairedttest, method = "BH")
###filter.LPSLPS <- filter.LPSLPS %>% select(c(2, 12:13))
####filter.LPSLPS$p.adj <- p.adjust(filter.LPSLPS$dd_pairedttest, method = "BH")
###padj values are already <0.05
#cut off log2FoldChange value >1.5 & < -1.5
filtered.MT <- filter(filter.MT, log2FoldChange > 1.5 | log2FoldChange < -1.5)
filtered.WT <- filter(filter.WT, log2FoldChange > 1.5 | log2FoldChange < -1.5)
#load tidyverse library the includes dplyr
#install.packages ("tidyverse")
library(tidyverse)
library(dplyr)
#install.packages("VennDiagram")
library(VennDiagram)
#install.packages("sigora")
library(sigora)
#read proteomic dataframes with paired ttest values included
MT <- read_csv("group_Mt_LPSLPS_vs_Vehicle_20190626.csv")
WT <- read_csv("group_Wt_LPSLPS_vs_Vehicle_20190626.csv")
#remove na values
filter.MT <- na.omit(MT)
filter.WT <- na.omit(WT)
#setwd
setwd("C:/Users/beverlie/Google Drive/RNA-Seq Analysis on iPSDM_MGST1 & S100A9/MGST1/DE_genes/MGST1_WTvMUT")
load tidyverse library the includes dplyr
#install.packages ("tidyverse")
library(tidyverse)
library(dplyr)
#install.packages("VennDiagram")
library(VennDiagram)
#install.packages("sigora")
library(sigora)
#read proteomic dataframes with paired ttest values included
MT <- read_csv("group_Mt_LPSLPS_vs_Vehicle_20190626.csv")
WT <- read_csv("group_Wt_LPSLPS_vs_Vehicle_20190626.csv")
#remove na values
filter.MT <- na.omit(MT)
filter.WT <- na.omit(WT)
#select columns: gene, Log2FC, padj, hgnc_symbol
filter.MT <- filter.MT %>%
select(c(1, 3, 7, 10))
filter.WT <- filter.WT %>%
select(c(1, 3, 7, 10))
filter(filter.MT, log2FoldChange > 1.5 | log2FoldChange < -1.5)
View(filter.MT)
#cut off log2FoldChange value >1.5 & < -1.5
filtered.MT <- filter(filter.MT, log2FoldChange >= 1.5 | log2FoldChange <= -1.5)
View(filtered.MT)
#cut off log2FoldChange value >1.5 & < -1.5
filtered.MT <- filter(filter.MT, log2FoldChange > 1.5 | log2FoldChange < -1.5)
filtered.WT <- filter(filter.WT, log2FoldChange > 1.5 | log2FoldChange < -1.5)
